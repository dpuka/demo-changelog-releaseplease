name: Build, Release, and Deploy

on:
  push:
    branches:
      - development
      - staging
      - production

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up environment
        run: echo "Setting up environment for build"

      - name: Install dependencies
        run: |
          echo "Installing dependencies"
          # Example for Node.js
          npm install

      - name: Build project
        run: |
          echo "Building project"
          # Example for Node.js
          npm run build
          cp -r scripts build/scripts
          cp appspec.yml build 

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: ./build # Adjust based on your project

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate a token
        id: generate-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}

      - name: Release Please Action
        uses: googleapis/release-please-action@v4
        with:
          release-type: node
          token: ${{ steps.generate-token.outputs.token }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build

      # - name: Upload Release Artifacts (Optional)
      #   if: ${{ github.ref == 'refs/heads/production' }}
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #   run: |
      #     echo "Uploading release artifacts"
      #     # For production releases, optionally upload build artifacts to a release on GitHub
      #     gh release create "${{ github.ref_name }}" ./build --title "Release ${{ github.ref_name }}"

  deploy:
    needs: [build, release]
    runs-on: ubuntu-latest
    environment: |-
        ${{
          github.ref_name == 'development' && 'development'
        || github.ref_name == 'staging'    && 'staging'
        || github.ref_name == 'production' && 'production'
        }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      APPLICATION_NAME: ${{ vars.APPLICATION_NAME }}
      DEPLOYMENT_GROUP: ${{ vars.DEPLOYMENT_GROUP }}
      S3_BUCKET: ${{ vars.AWS_BUCKET_NAME }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build
      
      - name: Deploy artifacts to AWS S3
        run: |
          ls -l
          tar -czf build.tar.gz ./
          echo "S3_KEY=builds/demo-changelog/build.tar.gz" >> $GITHUB_ENV
          aws s3 cp build.tar.gz s3://${{ vars.AWS_BUCKET_NAME }}/${{ env.S3_KEY }} \
          --region ${{ vars.AWS_BUCKET_REGION }}

      - name: Deploy to target environment
        run: |
          echo "Deploying to target environment"
          if [[ "${{ github.ref }}" == "refs/heads/development" ]]; then
            echo "Deploying to QA environment..."
            # Add deployment commands for development/QA

            aws deploy create-deployment \
              --application-name ${APPLICATION_NAME} \
              --region ${{ vars.AWS_BUCKET_REGION }} \
              --deployment-group-name ${DEPLOYMENT_GROUP} \
              --revision "{\"revisionType\":\"S3\",\"s3Location\":{\"bucket\":\"${S3_BUCKET}\",\"key\":\"${S3_KEY}\",\"bundleType\":\"tar\"}}" \
              --query "deploymentId" \
              --output text

          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "Deploying to Staging environment..."
            # Add deployment commands for staging
          elif [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
            echo "Deploying to Production environment..."
            # Add deployment commands for production
          fi

#
#

#
#
#
#
